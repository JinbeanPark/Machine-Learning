# -*- coding: utf-8 -*-
"""Fall2021-CS146-HW1

Name: Jinbean Park
UID: 805330751
Assignment number: HW1

Automatically generated by Colaboratory.
"""

import sys

# To add your own Drive Run this cell.
from google.colab import drive
drive.mount('/content/drive')

# Please append your own directory after â€˜/content/drive/My Drive/'
# where you have nutil.py and adult_subsample.csv
### ========== TODO : START ========== ###
# for example: sys.path += ['/content/drive/My Drive/Fall2020-CS146-HW1'] 
sys.path += ['/content/drive/My Drive/CS M146'] 
### ========== TODO : END ========== ###

from nutil import *

# Use only the provided packages!
import math
import csv

from collections import Counter

from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import cross_val_score
from sklearn import metrics
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import StratifiedShuffleSplit

######################################################################
# Immutatble classes
######################################################################

class Classifier(object) :
    """
    Classifier interface.
    """

    def fit(self, X, y):
        raise NotImplementedError()

    def predict(self, X):
        raise NotImplementedError()


class MajorityVoteClassifier(Classifier) :

    def __init__(self) :
        """
        A classifier that always predicts the majority class.

        Attributes
        --------------------
            prediction_ -- majority class
        """
        self.prediction_ = None

    def fit(self, X, y) :
        """
        Build a majority vote classifier from the training set (X, y).

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            y    -- numpy array of shape (n,), target classes

        Returns
        --------------------
            self -- an instance of self
        """
        majority_val = Counter(y).most_common(1)[0][0]
        self.prediction_ = majority_val
        return self

    def predict(self, X) :
        """
        Predict class values.

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples

        Returns
        --------------------
            y    -- numpy array of shape (n,), predicted classes
        """
        if self.prediction_ is None :
            raise Exception("Classifier not initialized. Perform a fit first.")

        n,d = X.shape
        y = [self.prediction_] * n
        return y

######################################################################
# Mutatble classes
######################################################################

class RandomClassifier(Classifier) :

    def __init__(self) :
        """
        A classifier that predicts according to the distribution of the classes.

        Attributes
        --------------------
            probabilities_ -- class distribution dict (key = class, val = probability of class)
        """
        self.probabilities_ = None

    def fit(self, X, y) :
        """
        Build a random classifier from the training set (X, y).

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            y    -- numpy array of shape (n,), target classes

        Returns
        --------------------
            self -- an instance of self
        """

        ### ========== TODO : START ========== ###
        # part b: set self.probabilities_ according to the training set
        n = X.shape[0]
        featProb = Counter(y).most_common(2)
        self.probabilities_ = [float(featProb[0][1]) / float(n), float(featProb[1][1]) / float(n)]
        return self

    def predict(self, X, seed=1234) :
        """
        Predict class values.

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            seed -- integer, random seed

        Returns
        --------------------
            y    -- numpy array of shape (n,), predicted classes
        """
        if self.probabilities_ is None :
            raise Exception("Classifier not initialized. Perform a fit first.")
        np.random.seed(seed)

        ### ========== TODO : START ========== ###
        # part b: predict the class for each test example
        # hint: use np.random.choice (be careful of the parameters)
        n = X.shape[0]
        y = np.random.choice([0, 1], n, p = [self.probabilities_[0], self.probabilities_[1]])

        ### ========== TODO : END ========== ###

        return y

######################################################################
# Immutatble functions
######################################################################

def plot_histograms(X, y, Xnames, yname) :
    n,d = X.shape  # n = number of examples, d =  number of features
    fig = plt.figure(figsize=(20,15))
    ncol = 3
    nrow = d // ncol + 1
    for i in range(d) :
        fig.add_subplot (nrow,ncol,i+1)
        data, bins, align, labels = plot_histogram(X[:,i], y, Xname=Xnames[i], yname=yname, show = False)
        n, bins, patches = plt.hist(data, bins=bins, align=align, alpha=0.5, label=labels)
        plt.xlabel(Xnames[i])
        plt.ylabel('Frequency')
        plt.legend() #plt.legend(loc='upper left')

    plt.savefig ('histograms.pdf')


def plot_histogram(X, y, Xname, yname, show = True) :
    """
    Plots histogram of values in X grouped by y.

    Parameters
    --------------------
        X     -- numpy array of shape (n,d), feature values
        y     -- numpy array of shape (n,), target classes
        Xname -- string, name of feature
        yname -- string, name of target
    """

    # set up data for plotting
    targets = sorted(set(y))
    data = []; labels = []
    for target in targets :
        features = [X[i] for i in range(len(y)) if y[i] == target]
        data.append(features)
        labels.append('%s = %s' % (yname, target))

    # set up histogram bins
    features = set(X)
    nfeatures = len(features)
    test_range = list(range(int(math.floor(min(features))), int(math.ceil(max(features)))+1))
    if nfeatures < 10 and sorted(features) == test_range:
        bins = test_range + [test_range[-1] + 1] # add last bin
        align = 'left'
    else :
        bins = 10
        align = 'mid'

    # plot
    if show == True:
        plt.figure()
        n, bins, patches = plt.hist(data, bins=bins, align=align, alpha=0.5, label=labels)
        plt.xlabel(Xname)
        plt.ylabel('Frequency')
        plt.legend() #plt.legend(loc='upper left')
        plt.show()

    return data, bins, align, labels

######################################################################
# Mutatble functions
######################################################################

def error(clf, X, y, ntrials=100, test_size=0.15) :
    """
    Computes the classifier error over a random split of the data,
    averaged over ntrials runs.

    Parameters
    --------------------
        clf         -- classifier
        X           -- numpy array of shape (n,d), features values
        y           -- numpy array of shape (n,), target classes
        ntrials     -- integer, number of trials

    Returns
    --------------------
        train_error -- float, training error
        test_error  -- float, test error
        f1_score    -- float, test "micro" averaged f1 score
    """

    ### ========== TODO : START ========== ###
    # compute cross-validation error using StratifiedShuffleSplit over ntrials
    # hint: use StratifiedShuffleSplit (be careful of the parameters)
    train_error = 0
    test_error = 0
    f1_score = 0
    
    sss = StratifiedShuffleSplit(n_splits = ntrials, test_size = test_size, random_state = 0)

    for trainIndx, testIndx in sss.split(X, y):
      #1. get and set the data to use
      trainX = X[trainIndx]
      testX = X[testIndx]
      trainY = y[trainIndx]
      testY = y[testIndx]
      
      #2. Fit training data using the classifier
      clf.fit(trainX, trainY)
      yTrainPredict = clf.predict(trainX)
      yTestPredict = clf.predict(testX)

      #3. Get the train and test errors.
      train_error += 1 - metrics.accuracy_score(trainY, yTrainPredict, normalize = True)
      test_error += 1 - metrics.accuracy_score(testY, yTestPredict, normalize = True)
      f1_score += metrics.f1_score(testY, yTestPredict, average = "micro")

    #4. Get the average of train_error, test_error, and f1_score.
    train_error = train_error / float(ntrials)
    test_error = test_error / float(ntrials)
    f1_score = f1_score / float(ntrials)
    
    ### ========== TODO : END ========== ###

    return train_error, test_error, f1_score

######################################################################
# Immutatble functions
######################################################################


def write_predictions(y_pred, filename, yname=None) :
    """Write out predictions to csv file."""
    out = open(filename, 'wb')
    f = csv.writer(out)
    if yname :
        f.writerow([yname])
    f.writerows(list(zip(y_pred)))
    out.close()

######################################################################
# main
######################################################################

def main():
    
    
    
    # load adult_subsample dataset with correct file path
    ### ========== TODO : START ========== ###
    data_file =  "/content/drive/My Drive/CS M146/adult_subsample.csv"
    ### ========== TODO : END ========== ###
    



    data = load_data(data_file, header=1, predict_col=-1)

    X = data.X; Xnames = data.Xnames
    y = data.y; yname = data.yname
    n,d = X.shape  # n = number of examples, d =  number of features

    

    plt.figure()
    #========================================
    # part a: plot histograms of each feature
    print('Plotting...')
    plot_histograms (X, y, Xnames=Xnames, yname=yname)
    




    ### ========== TODO : START ========== ###
    # part i: Preprocess X (e.g., normalize)
    
    #scaler = StandardScaler()
    #scaler.fit(X)
    #X = scaler.transform(X)

    ### ========== TODO : END ========== ###




    #========================================
    # train Majority Vote classifier on data
    print('Classifying using Majority Vote...')
    clfMajority = MajorityVoteClassifier() # create MajorityVote classifier, which includes all model parameters
    clfMajority.fit(X, y)                  # fit training data using the classifier
    y_pred = clfMajority.predict(X)        # take the classifier and run it on the training data
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error: %.3f' % train_error)

    ### ========== TODO : START ========== ###
    # part b: evaluate training error of Random classifier
    print('Classifying using Random classifier...')
    clfRan = RandomClassifier()
    clfRan.fit(X, y)
    y_pred = clfRan.predict(X)
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error: %.3f' % train_error)
    ### ========== TODO : END ========== ###


    ### ========== TODO : START ========== ###
    # part c: evaluate training error of Decision Tree classifier
    print('Classifying using Decision Tree classifier...')
    clfDeciTree = DecisionTreeClassifier(criterion = 'entropy')
    clfDeciTree.fit(X, y)
    y_pred = clfDeciTree.predict(X)
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error: %.3f' % train_error)
    ### ========== TODO : END ========== ###


    ### ========== TODO : START ========== ###
    # part d: evaluate training error of k-Nearest Neighbors classifier
    # use k = 3, 11, 19 for n_neighbors
    print('Classifying using k-Nearest Neighbors classifier...')
    clfKNeighbor3 = KNeighborsClassifier(n_neighbors = 3)
    clfKNeighbor3.fit(X, y)
    y_pred = clfKNeighbor3.predict(X)
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error for k = 3: %.3f' % train_error)

    clfKNeighbor11 = KNeighborsClassifier(n_neighbors = 11)
    clfKNeighbor11.fit(X, y)
    y_pred = clfKNeighbor11.predict(X)
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error for k = 11: %.3f' % train_error)

    clfKNeighbor19 = KNeighborsClassifier(n_neighbors = 19)
    clfKNeighbor19.fit(X, y)
    y_pred = clfKNeighbor19.predict(X)
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error for k = 19: %.3f' % train_error)
    ### ========== TODO : END ========== ###


    ### ========== TODO : START ========== ###
    # part e: use cross-validation to compute average training and test error of classifiers
    print('Investigating various classifiers...')
    
    # Majority vote classifier
    train_error, test_error, f1_score = error(clfMajority, X, y)
    print('\t-- training error for Majority vote classifier: %.3f' % train_error)
    print('\t-- testing error for Majority vote classifier: %.3f' % test_error)
    print('\t-- f1 score for Majority vote classifier: %.3f' % f1_score)
    
    # Random classifier
    train_error, test_error, f1_score = error(clfRan, X, y)
    print('\t-- training error for Random classifier: %.3f' % train_error)
    print('\t-- testing error for Random classifier: %.3f' % test_error)
    print('\t-- f1 score for Random classifier: %.3f' % f1_score)
    
    # Decision Tree classifier
    train_error, test_error, f1_score = error(clfDeciTree, X, y)
    print('\t-- training error for Decision Tree classifier: %.3f' % train_error)
    print('\t-- testing error for Decision Tree classifier: %.3f' % test_error)
    print('\t-- f1 score for Decision Tree classifier: %.3f' % f1_score)
    
    # 3-Nearest Neighbors classifier
    train_error, test_error, f1_score = error(clfKNeighbor3, X, y)
    print('\t-- training error for 3-Nearest Neighbors classifier: %.3f' % train_error)
    print('\t-- testing error for 3-Nearest Neighbors classifier: %.3f' % test_error)
    print('\t-- f1 score for 3-Nearest Neighbors classifier: %.3f' % f1_score)
    
    # 11-Nearest Neighbors classifier
    train_error, test_error, f1_score = error(clfKNeighbor11, X, y)
    print('\t-- training error for 11-Nearest Neighbors classifier: %.3f' % train_error)
    print('\t-- testing error for 11-Nearest Neighbors classifier: %.3f' % test_error)
    print('\t-- f1 score for 11-Nearest Neighbors classifier: %.3f' % f1_score)
    
    # 19-Nearest Neighbors classifier
    train_error, test_error, f1_score = error(clfKNeighbor19, X, y)
    print('\t-- training error for 19-Nearest Neighbors classifier: %.3f' % train_error)
    print('\t-- testing error for 19-Nearest Neighbors classifier: %.3f' % test_error)
    print('\t-- f1 score for 19-Nearest Neighbors classifier: %.3f' % f1_score)
    ### ========== TODO : END ========== ###


    ### ========== TODO : START ========== ###
    # part f: use 5-fold cross-validation to find the best value of k for k-Nearest Neighbors classifier
    print('Finding the best k...')
    K = []
    validError = []
    for curK in range (1, 51, 2):
      K.append(curK)
      curKclf = KNeighborsClassifier(n_neighbors = curK)
      errorK = 1 - cross_val_score(curKclf, X, y, cv = 5).mean()
      validError.append(errorK)
    minValidErr = min(validError)
    bestValK = 1 + validError.index(minValidErr) * 2
    print('\t-- The best value of k: %d' % bestValK)
    print('\t-- The corresponding score of the best value of k: %.3f' % minValidErr)
    plt.figure()
    plt.plot(K, validError, label = "Validation error for each value of k in K-Nearest Neighbors classifier")
    plt.xticks(np.arange(0, 51, 3))
    plt.xlabel('The value of neighbor, k')
    plt.ylabel('validation error')
    plt.show()
    ### ========== TODO : END ========== ###


    ### ========== TODO : START ========== ###
    # part g: investigate decision tree classifier with various depths
    print('Investigating depths...')
    depth = []
    trainError = []
    testError = []
    for d in range (1, 21):
      depth.append(d)
      depthLimitClf = DecisionTreeClassifier(criterion = 'entropy', max_depth = d)
      curTrainErr, curTestErr, curF1Score = error(depthLimitClf, X, y)
      trainError.append(curTrainErr)
      testError.append(curTestErr)
    bestDepthD = testError.index(min(testError)) + 1
    print('\t-- The best value of d: %d' % bestDepthD)
    plt.figure()
    trainLine, = plt.plot(depth, trainError, label = "Training error")
    testLine, = plt.plot(depth, testError, label = "Test error")
    plt.xlabel("Depth limit")
    plt.ylabel("Validation error")
    plt.legend(handles = [trainLine, testLine])
    plt.xticks(np.arange(0, 22, 1))
    plt.show()
    ### ========== TODO : END ========== ###


    ### ========== TODO : START ========== ###
    # part h: investigate decision tree and k-Nearest Neighbors classifier with various training set sizes
    
    bestKNclf = KNeighborsClassifier(n_neighbors = bestValK)
    bestDTclf = DecisionTreeClassifier(criterion = "entropy", max_depth = bestDepthD)
    knTrainErr = []
    knTestErr = []
    dtTrainErr = []
    dtTestErr = []
    
    sss = StratifiedShuffleSplit(n_splits = 1, test_size = 0.1, random_state = 0)
    for trainIndx, testIndx in sss.split(X, y):
      trainX, testX = X[trainIndx], X[testIndx]
      trainY, testY = y[trainIndx], y[testIndx]
       
    proportion = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
    
    for i in range (100):
      KNtrainErrScor = []
      KNtestErrScor = []
      DTtrainErrScor = []
      DTtestErrScor = []

      for p in proportion:
        if p == 1.0:
          pTrainX = trainX
          pTestX = testX
          pTrainY = trainY
          pTestY = testY
        else:
          sss = StratifiedShuffleSplit(n_splits = 1, test_size = (1 - p), random_state = 0)
          for trainIndx, testIndx in sss.split(trainX, trainY):
            pTrainX, pTestX = X[trainIndx], X[testIndx]
            pTrainY, pTestY = y[trainIndx], y[testIndx]

        bestKNclf.fit(pTrainX, pTrainY)
        yTrainPredict = bestKNclf.predict(pTrainX)
        yTestPredict = bestKNclf.predict(testX)
        KNtrainErrScor.append(1 - metrics.accuracy_score(pTrainY, yTrainPredict, normalize = True))
        KNtestErrScor.append(1 - metrics.accuracy_score(testY, yTestPredict, normalize = True))
        
        bestDTclf.fit(pTrainX, pTrainY)
        yTrainPredict = bestDTclf.predict(pTrainX)
        yTestPredict = bestDTclf.predict(testX)
        DTtrainErrScor.append(1 - metrics.accuracy_score(pTrainY, yTrainPredict, normalize = True))
        DTtestErrScor.append(1 - metrics.accuracy_score(testY, yTestPredict, normalize = True))
      knTrainErr.append(KNtrainErrScor)
      knTestErr.append(KNtestErrScor)
      dtTrainErr.append(DTtrainErrScor)
      dtTestErr.append(DTtestErrScor)

    avgErrScor = []
    for i in range (10):
      iProportion = [subErrScor[i] for subErrScor in knTrainErr]
      avgErrScor.append(sum(iProportion) / len(iProportion))
    plt.plot(proportion, avgErrScor, label = "KN-Training error")
    avgErrScor.clear()

    for i in range (10):
      iProportion = [subErrScor[i] for subErrScor in knTestErr]
      avgErrScor.append(sum(iProportion) / len(iProportion))
    plt.plot(proportion, avgErrScor, label = "KN-Test error")
    avgErrScor.clear()

    for i in range (10):
      iProportion = [subErrScor[i] for subErrScor in dtTrainErr]
      avgErrScor.append(sum(iProportion) / len(iProportion))
    plt.plot(proportion, avgErrScor, label = "Decision Tree-Training error")
    avgErrScor.clear()

    for i in range (10):
      iProportion = [subErrScor[i] for subErrScor in dtTestErr]
      avgErrScor.append(sum(iProportion) / len(iProportion))
    plt.plot(proportion, avgErrScor, label = "Decision Tree-Test error")
    avgErrScor.clear()

    plt.xlabel("Proportions")
    plt.ylabel("Validation error score")
    plt.legend()
    plt.show()
  
    ### ========== TODO : END ========== ###

    print('Done')


if __name__ == "__main__":
    main()
